{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ApplySyntax","text":""},{"location":"#overview","title":"Overview","text":"<p>ApplySyntax is a plugin for Sublime Text that allows you to detect and apply the syntax of files that might not otherwise be detected properly. For example, files with the <code>.rb</code> extension are usually Ruby files, but when they are found in a Rails project, they could be RSpec spec files, Cucumber step files, Ruby on Rails files (controllers, models, etc), or just plain Ruby files. This is actually the problem I was trying to solve when I started working on this plugin.</p>"},{"location":"#credits","title":"Credits","text":"<p>DetectSyntax was originally created by phillipkoebbe.  In his words, these are his credits:</p> <p>It all started by forking the plugin created by JeanMertz (1). I modified it quite extensively until I ended up with something entirely my own (2). @maxim and @omarramos commented on the gist and suggested it should be part of Package Control. As I had created it solely for my own consumption, it seemed a bit \"hard-coded\" to be valuable as a package, but then I took a look at SetSyntax (3). and saw how using settings would make it very flexible. That set me on the path that led to DetectSyntax.</p> <p>\u2013 phillipkoebbe</p>"},{"location":"#installation","title":"Installation","text":"<p>The recommended installation method is via Package Control.  Learn more here: https://sublime.wbond.net/.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#package-control","title":"Package Control","text":"<p>The recommended way to install ApplySyntax is via Package Control.  Package Control will install the correct branch on your system and keep it up to date.</p> <ol> <li> <p>Ensure Package Control is installed.  Instructions are found here.</p> </li> <li> <p>In Sublime Text, press Ctrl\uff0bShift\uff0bP (Win, Linux) or Cmd\uff0bShift\uff0bP (macOS) to bring up the quick panel and     start typing <code>Package Control: Install Package</code>.  Select the command and it will show a list of installable plugins.</p> </li> <li> <p>Start typing <code>ApplySyntax</code>; when you see it, select it.</p> </li> <li> <p>Restart to be sure everything is loaded proper.</p> </li> <li> <p>Enjoy!</p> </li> </ol>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>Warning</p> <p>This is not the recommended way to install ApplySyntax for the average user.  Installing this way will not get automatically updated.</p> <p>If you are forking for a pull request, you should just clone ApplySyntax and run Package Control's <code>Satisfy Dependency</code> command to get all the dependencies.</p> <p>For those who want to install ApplySyntax without package control, here are the steps.  It is understood that some people, for what ever reason, will prefer manual install and may even have legitimate reasons to do so.  When going this route, you will have to keep all the packages updated yourself.</p> <ol> <li> <p>Download the latest releases of the following dependencies and unpack or git clone in the <code>Packages</code> folder as shown     below:</p> <ul> <li>teddy_beer_maniac/sublime-text-dependency-markupsafe -&gt; <code>markupsafe</code></li> <li>teddy_beer_maniac/sublime-text-dependency-jinja2 -&gt; <code>python-jinja2</code></li> <li>packagecontrol/pygments -&gt; <code>pygments</code></li> <li>facelessuser/sublime-markdown-popups -&gt; <code>mdpopups</code></li> <li>facelessuser/sublime-markdown -&gt; <code>python-markdown</code></li> </ul> </li> <li> <p>Download and unpack, or git clone, the latest ApplySyntax release and unpack as <code>ApplySyntax</code>:</p> <ul> <li>facelessuser/ApplySyntax -&gt; ApplySyntax</li> </ul> </li> <li> <p>Create a folder under <code>Packages</code> called <code>00-dependencies</code> and under that folder create a file called     <code>00-dependencies.py</code>:</p> <p>Copy the following code to <code>00-dependencies.py</code> (this code was taken from Package Control):</p> <pre><code>import sys\nimport os\nfrom os.path import dirname\n\nif os.name == 'nt':\n    from ctypes import windll, create_unicode_buffer\n\nimport sublime\n\n\nif sys.version_info &gt;= (3,):\n    def decode(path):\n        return path\n\n    def encode(path):\n        return path\n\n    if os.path.basename(__file__) == 'sys_path.py':\n        pc_package_path = dirname(dirname(__file__))\n    # When loaded as a .sublime-package file, the filename ends up being\n    # Package Control.sublime-package/Package Control.package_control.sys_path\n    else:\n        pc_package_path = dirname(__file__)\n    st_version = u'3'\n\nelse:\n    def decode(path):\n        if not isinstance(path, unicode):\n            path = path.decode(sys.getfilesystemencoding())\n        return path\n\n    def encode(path):\n        if isinstance(path, unicode):\n            path = path.encode(sys.getfilesystemencoding())\n        return path\n\n    pc_package_path = decode(os.getcwd())\n    st_version = u'2'\n\n\nst_dir = dirname(dirname(pc_package_path))\n\n\ndef add(path, first=False):\n\"\"\"\n    Adds an entry to the beginning of sys.path, working around the fact that\n    Python 2.6 can't import from non-ASCII paths on Windows.\n\n    :param path:\n        A unicode string of a folder, zip file or sublime-package file to\n        add to the path\n\n    :param first:\n        If the path should be added at the beginning\n    \"\"\"\n\n    if os.name == 'nt':\n        # Work around unicode path import issue on Windows with Python 2.6\n        buf = create_unicode_buffer(512)\n        if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n            path = buf.value\n\n    enc_path = encode(path)\n\n    if os.path.exists(enc_path):\n        if first:\n            try:\n                sys.path.remove(enc_path)\n            except (ValueError):\n                pass\n            sys.path.insert(0, enc_path)\n        elif enc_path not in sys.path:\n            sys.path.append(enc_path)\n\n\ndef remove(path):\n\"\"\"\n    Removes a path from sys.path if it is present\n\n    :param path:\n        A unicode string of a folder, zip file or sublime-package file\n    \"\"\"\n\n    try:\n        sys.path.remove(encode(path))\n    except (ValueError):\n        pass\n\n    if os.name == 'nt':\n        buf = create_unicode_buffer(512)\n        if windll.kernel32.GetShortPathNameW(path, buf, len(buf)):\n            path = buf.value\n        try:\n            sys.path.remove(encode(path))\n        except (ValueError):\n            pass\n\n\ndef generate_dependency_paths(name):\n\"\"\"\n    Accepts a dependency name and generates a dict containing the three standard\n    import paths that are valid for the current machine.\n\n    :param name:\n        A unicode string name of the dependency\n\n    :return:\n        A dict with the following keys:\n         - 'ver'\n         - 'plat'\n         - 'arch'\n    \"\"\"\n\n    packages_dir = os.path.join(st_dir, u'Packages')\n    dependency_dir = os.path.join(packages_dir, name)\n\n    ver = u'st%s' % st_version\n    plat = sublime.platform()\n    arch = sublime.arch()\n\n    return {\n        'all': os.path.join(dependency_dir, 'all'),\n        'ver': os.path.join(dependency_dir, ver),\n        'plat': os.path.join(dependency_dir, u'%s_%s' % (ver, plat)),\n        'arch': os.path.join(dependency_dir, u'%s_%s_%s' % (ver, plat, arch))\n    }\n\n\ndef add_dependency(name, first=False):\n\"\"\"\n    Accepts a dependency name and automatically adds the appropriate path\n    to sys.path, if the dependency has a path for the current platform and\n    architecture.\n\n    :param name:\n        A unicode string name of the dependency\n\n    :param first:\n        If the path should be added to the beginning of the list\n    \"\"\"\n\n    dep_paths = generate_dependency_paths(name)\n\n    for path in dep_paths.values():\n        if os.path.exists(encode(path)):\n            add(path, first=first)\n\n\nadd_dependency('pygments')\nadd_dependency('markupsafe')\nadd_dependency('python-markdown')\nadd_dependency('python-jinja2')\nadd_dependency('mdpopups')\n</code></pre> </li> <li> <p>Restart and enjoy.</p> </li> </ol>"},{"location":"installation/#git-cloning","title":"Git Cloning","text":"<ol> <li> <p>Quit Sublime Text.</p> </li> <li> <p>Open a terminal and enter the following.  For dependencies, replace the URL with the appropriate URL, and the     appropriate folder to check it out to:</p> <pre><code>cd /path/to/Sublime Text 3/Packages\ngit clone https://github.com/facelessuser/ApplySyntax.git ApplySyntax\n</code></pre> </li> <li> <p>Restart Sublime Text.</p> </li> </ol>"},{"location":"usage/","title":"User Guide","text":""},{"location":"usage/#overview","title":"Overview","text":"<p>ApplySyntax is based on the idea of creating rules for applying certain syntaxes to specific files. You define the rules, the plugin checks them. The first one to pass wins.</p> <p>ApplySyntax allows you to create your own custom rules. The easiest way to get started is to press Ctrl\uff0bShift\uff0bP (Win, Linux) or Cmd\uff0bShift\uff0bP (macOS) to bring up the quick panel and start typing <code>ApplySyntax: Settings</code>.  Alternatively, you can create a settings file called <code>ApplySyntax.sublime-settings</code> in your <code>Packages/User</code> folder.  You can override the default settings in <code>Packages/ApplySyntax/ApplySyntax.sublime-settings</code> by setting them in your <code>Packages/User/ApplySyntax.sublime-settings</code> file. You can override any setting to meet your needs.  To prepend rules to the default rule set, you can create a key called <code>syntaxes</code> (modifying <code>default_syntaxes</code> will wipe out all the default rules and is not recommended as you won't get the latest updates).</p>"},{"location":"usage/#commands","title":"Commands","text":"<p>When create syntax rules, you will need to use the syntax file name, not the name that shows in the status bar. A few commands have been added to make it easy to determine what to put into a syntax rule.</p>"},{"location":"usage/#applysyntax-browse-syntaxes","title":"ApplySyntax: Browse Syntaxes","text":"<p>This command will show a quick panel of all the syntaxes in your Sublime Text install. You can fuzzy search them, and when you select one, it will be copied to the clipboard in a form compatible to be used in a syntax rule. Simply paste it in the rule.</p> <p>New 4.0</p> <p><code>ApplySyntax: Browse Syntaxes</code> is new in 4.0.</p>"},{"location":"usage/#applysyntax-copy-current-syntax-to-clipboard","title":"ApplySyntax: Copy Current Syntax to Clipboard","text":"<p>This command will copy the current syntax in the active view to your clipboard in a form that is compatible to be used in a syntax rule. Simply paste it in the rule.</p> <p>New 4.0</p> <p><code>ApplySyntax: Copy Current Syntax to Clipboard</code> is new in 4.0.</p>"},{"location":"usage/#creating-rules","title":"Creating Rules","text":"<p>Each rule is a dictionary within the syntax array.  Let's take a look at the top level parameters.</p>"},{"location":"usage/#syntax","title":"Syntax","text":"<p>The <code>syntax</code> attribute is the syntax file that will be applied to a view which meets the criteria defined in the rule.</p> <p>For syntax files you must specify the path to the syntax file. The plugin is capable of supporting multiple levels of folder nesting if you need it to. For example, if you had all of your tmLanguage files for Rails organized in a folder like this: <code>Packages/Rails/Language/*.tmLanguage</code>, and you were looking to use the <code>Ruby Haml.tmLanguage</code> file, the path to name translation would simply be: <code>Packages/Rails/Language/Ruby Haml.tmLanguage</code> \u2192 <code>Rails/Language/Ruby Haml</code>.</p> <pre><code>\"syntax\": \"Rails/Language/Ruby Haml\"\n</code></pre> <p>Notice that the paths are relative to the <code>Packages</code> folder.  Also, notice that we don't specify the extension.  Sublime Text in build 3084 added a new language syntax with the extension <code>sublime-syntax</code>.  In Sublime builds &gt;= 3084, ApplySyntax will first default to <code>sublime-syntax</code> and fall back to <code>tmLanguage</code> if it cannot find the the other format. If you want to force the syntax, just specify the extension; the extension must be either <code>sublime-syntax</code> or <code>tmLanguage</code>.</p> <pre><code>\"syntax\": \"Rails/Language/Ruby Haml.tmLanguage\"\n</code></pre> <p>If it is desirable for the syntax rule to reference multiple tmLanguage files because it is not known which package will be on a machine, you can set the syntax as an array of syntaxes as shown in the following example.  The first one found will be used.</p> <pre><code>\"syntax\": [\"RSpec/RSpec\", \"RSpec (snippets and syntax)/Syntaxes/RSpec\"]\n</code></pre> <p>Notice that each syntax file has a different path since they come from completely different plugins.</p> <p>Lastly, if using Package Control, it is likely that most, if not all, of your packages will be zipped with the extension <code>.sublime-package</code> in the <code>Installed Packages</code> folder instead of <code>Packages</code>.  These will be handled exactly like plugins installed under <code>Packages</code>.  The one difference is that you treat the zip bundle as a folder without the <code>.sublime-package</code> extension.  So if we had a syntax file located in a zipped bundle: <code>Installed Packages/Rails.sublime-package/Language/Ruby Haml.tmLanguage</code> \u2192 <code>Rails/Language/Ruby Haml</code>.</p> <pre><code>\"syntax\": \"Rails/Language/Ruby Haml\"\n</code></pre>"},{"location":"usage/#extensions","title":"Extensions","text":"<p>The <code>extensions</code> attribute is used to define extensions to apply a syntax to.  <code>extensions</code> is an array of strings where each string is an extension.  No <code>.</code> is needed when defining extensions, unless it is desired to target a dot file like <code>.gitignore</code>, then you would include the <code>.</code>.</p> <pre><code>    {\n\"syntax\": \"YAML/YAML\",\n\"extensions\": [\".gemrc\", \"yml\", \"yml.dist\"]\n},\n</code></pre> <p><code>extensions</code> is evaluated before all other rules, and it never takes part in \"match all\" rule sets as it is run separate from the normal rule sets; if an extension is matched here, all other rules will be skipped.</p> <p>An added benefit of <code>extensions</code>, if you are using ST3 and set <code>add_exts_to_lang_settings</code> to <code>true</code>, is that ApplySyntax will add the extensions to the specified syntax language's settings file in your <code>User</code> folder.  By doing this, Sublime Text will be able to show the associated icon for the file type in the sidebar.  Apply syntax will also create a file <code>ApplySyntax.ext-list</code> in your <code>User</code> folder and track which extension it added so that if you remove a rule, ApplySyntax will only remove the extensions it added to the language file in question. If you do not like this functionality, you can simply disable <code>add_exts_to_lang_settings</code> by setting it to <code>false</code>.</p> <p>Note</p> <p><code>add_exts_to_lang_settings</code> will not be applied to <code>extensions</code> found in a project specific rule, as project specific rules are not global, but the effects of <code>add_exts_to_lang_settings</code> are global.</p>"},{"location":"usage/#match","title":"Match","text":"<p><code>match</code> is a setting that you either include or omit.  When included, you set it to <code>all</code>.  When set, all rules defined must be met for a match to be considered successful.  <code>match</code> ignores the <code>extensions</code> key as <code>extensions</code> never take part in \"match all\" rule sets.  If you want to include an extension rule in a \"match all\" rule set, then a <code>file_path</code> rule should be used.</p> <pre><code>    \"match\": \"all\"\n</code></pre> <p>So in this case, all the rules must match for the syntax to be applied:</p> <pre><code>     \"syntax\": \"Handlebars/Handlebars\",\n\"match\": \"all\",\n\"rules\": [\n{\"file_path\": \".*\\\\.html$\"},\n{\"contains\": \"&lt;script [^&gt;]*type=\\\"text\\\\/x-handlebars\\\"[^&gt;]*&gt;\"}\n]\n</code></pre> <p>In this case, there is no <code>match</code> key, so only one rule needs to match:</p> <pre><code>    {\n\"syntax\": \"Ruby/Ruby\",\n\"rules\": [\n{\"file_path\": \".*/Gemfile$\"},\n{\"file_path\": \".*/Capfile$\"},\n{\"file_path\": \".*/Guardfile$\"},\n{\"file_path\": \".*/[Rr]akefile$\"},\n{\"file_path\": \".*/Berksfile$\"},\n{\"file_path\": \".*/[Cc]heffile$\"},\n{\"file_path\": \".*/Thorfile$\"},\n{\"file_path\": \".*/Podfile$\"},\n{\"file_path\": \".*/config.ru$\"},\n{\"file_path\": \".*/Vagrantfile(/..*)?$\"},\n{\"file_path\": \".*\\\\.thor$\"},\n{\"file_path\": \".*\\\\.rake$\"},\n{\"file_path\": \".*\\\\.simplecov$\"},\n{\"file_path\": \".*\\\\.jbuilder$\"},\n{\"file_path\": \".*\\\\.rb$\"},\n{\"file_path\": \".*\\\\.podspec$\"},\n{\"file_path\": \".*\\\\.rabl$\"},\n{\"interpreter\": \"ruby\"}\n]\n},\n</code></pre>"},{"location":"usage/#rules","title":"Rules","text":"<p><code>rules</code> is an array of rules that can be used to target specific files with your defined syntax file.  The rules are processed until the first rule matches, so order your rules in a way that makes sense to you.</p>"},{"location":"usage/#globmatch-rule","title":"Globmatch Rule","text":"<p>A <code>globmatch</code> rule defines a glob pattern to match a file path against. Regex is more powerful, but often, a glob pattern can be far less cumbersome and easier to specify patterns that work cross platform.</p> <p>ApplySyntax uses the <code>wcmatch</code> library with the following flags enabled:</p> <ul> <li><code>GLOBSTAR</code>: Allows you to match 0 or more directories with <code>**</code>.</li> <li><code>BRACE</code>: Allows you to use Bash style brace expansions for patterns (<code>a{b,c}</code> \u2192 <code>ab ac</code>).</li> <li><code>EXTGLOB</code>: Allows you to use extended glob patterns such as <code>@(file1|file2)</code>, etc.</li> <li><code>NEGATE</code>: Allows you to use exclusion patterns that filter inclusion patterns (<code>['**/*.py', '!**/bad.py']</code>).</li> <li><code>DOTGLOB</code>: Allows <code>*</code> and other such patterns to match file names that start with <code>.</code>.</li> </ul> <p><code>globmatch</code> rule takes either a string pattern or list of strings patterns. You do not have to specify Windows paths with <code>\\\\</code>, just use <code>/</code>.</p> <pre><code>{\"globmatch\": \"**/*.py\"}\n</code></pre> <p>When providing a list, all patterns are evaluated together. This allows you to apply excludes:</p> <pre><code>{\"globmatch\": [\"**/*.py\", \"!**/bad.py\"]}\n</code></pre> <p>If necessary, you can specify case sensitivity:</p> <pre><code>{\"globmatch\": \"**/*.py\", \"case\": true}\n</code></pre> <p>New 4.0</p> <p><code>globmatch</code> rules are new in 4.0.</p>"},{"location":"usage/#file-path-rule","title":"File Path Rule","text":"<p>A <code>file_path</code> rule defines a regex to match against the complete file path. The pattern is always anchored to the beginning of the path, as if there were an implicit <code>^</code> \u2014 so the pattern <code>/a/b/c</code> will match the file <code>/a/b/c/foo.py</code>, but not the file <code>/x/y/z/a/b/c/foo.py</code>. (You may include an explicit <code>^</code> at the beginning of the pattern, as some of the default rules do \u2014 but the result is the same either way.)</p> <p>For backwards compatibility with older versions of ApplySyntax, the rule name <code>file_name</code> is also accepted, and functions exactly like <code>file_path</code>.</p> <pre><code>{\"file_path\": \".*\\\\.xml(\\\\.dist)?$\"},\n</code></pre> <p>Changed 4.0</p> <p>On Windows systems, paths are now normalized to from using <code>\\</code> to <code>/</code>. This makes creating patterns for cross platform use much easier, but it may break some existing rules in the short term.</p>"},{"location":"usage/#first-line-rule","title":"First Line Rule","text":"<p>A <code>first_line</code> rule allows you to check whether the first line of the file's content matches a given regex. As with <code>file_path</code> rules, the pattern is always anchored to the beginning of the line.</p> <pre><code>{\"first_line\": \"^&lt;\\\\?xml\"},\n</code></pre>"},{"location":"usage/#interpreter-shebang","title":"Interpreter (Shebang)","text":"<p>An <code>interpreter</code> rule does the same thing as a <code>first_line</code> rule that uses a regex to match an interpreter directive (shebang).  The difference being that ApplySyntax will construct the regex for you.</p> <p>So a <code>first_line</code> rule:</p> <pre><code>{\"first_line\": \"^#\\\\!(?:.+)ruby\"}\n</code></pre> <p>Can be simplified as:</p> <pre><code>{\"interpreter\": \"ruby\"}\n</code></pre> <p>For backwards compatibility with older versions of ApplySyntax, the rule name <code>binary</code> is also accepted, and functions exactly like <code>interpreter</code>.</p>"},{"location":"usage/#function-rule","title":"Function Rule","text":"<p>This is an example of using a custom function to decide whether or not to apply a syntax. This is done via ApplySyntax plugins.  The plugin file should be under a plugin folder.</p> <p>The function rule takes two parameters.  The first is <code>source</code> and is the plugin source file.  It is defined as if you were importing a python plugin.  If you had a plugin in <code>Packages/ApplySyntax/as_plugins/is_rails_file.py</code>, it would be defined under <code>source</code> as <code>ApplySyntax.as_plugins.is_rails_file</code>.  Function rules still support the legacy way: <code>ApplySyntax/as_plugins/is_rails_file</code>, but it is recommended to use the dot notation as it makes more sense from a Python import perspective.</p> <p>The second parameter is <code>args</code> and is optional. <code>args</code> is a dictionary of the keyword arguments the function rule plugin accepts.</p> <p>The plugin must have a function defined as <code>syntax_test</code>. <code>syntax_test</code> will be the function called within the plugin file and accepts an argument <code>file_path</code> (which is the full path to the file being evaluated), and any custom keyword arguments desired by the user.  The plugin must return either <code>True</code> or <code>False</code>.</p> <pre><code>{\"function\": {\"source\": \"User.plugins.myplugin\", \"args\": {'foo': \"bar\"}}}\n</code></pre> <p>Example:</p> <pre><code>def syntax_test(file_path, foo):\n    # Some test logic\n    return False # True or False\n</code></pre> <p>Tip</p> <p>When placing a function rule module in a package, it is advised to put it in a sub-folder.  The sub-folder does not need an <code>__init__.py</code>, it just needs your module(s).</p>"},{"location":"usage/#content-rule","title":"Content Rule","text":"<p>Sometimes a file name or first line search is just not enough and maybe a function rule is overkill.  In this case, maybe searching the content of a file can be enough.  You can search a file's content with regex for a specific token via the <code>contains</code> rule.</p> <pre><code>{\"contains\": \"&lt;script [^&gt;]*type=\\\"text\\\\/x-handlebars\\\"[^&gt;]*&gt;\"}\n</code></pre> <p>Tip</p> <p>It is recommended to pair <code>contains</code> rules with other rules via the <code>\"match\": \"all\"</code> option to ensure you don't search every file (which can significantly slow down the editor); this will also help ensure get more reliable matches. If pairing with other rules as dependencies, it is advised to pair the <code>contains</code> rule after the other required rule(s) to ensure you search the content of as few files as possible.</p> <p>Also, try to use very specific regex to ensure you don't get false positives.</p>"},{"location":"usage/#extension-trimming","title":"Extension Trimming","text":"<p>Sometimes a file may have a trailing extension that prevents it from matching a rule, but if it was trimmed off, it would match. By creating an extension trimming rule, you target files that do not initial match and send them back through the pipe without it's last extension.</p> <p>Currently, an extension trimming rule only contains a <code>file_path</code> pattern.</p> <pre><code>\"ext_trim\": [{\"file_path\": \".*\\\\.py3\\\\.temp\"}]\n</code></pre> <p>You can also use <code>globmatch</code> patterns:</p> <pre><code>\"ext_trim\": [{\"globmatch\": \"**/*.py3.temp\"}]\n</code></pre> <p>So, if we had a file named <code>test.py3.temp</code>, it normally wouldn't match one of default rules. With the above rule, the file would be retried as <code>test.py3</code> and would match the Python syntax rule.</p> <p>New 4.0</p> <p><code>globmatch</code> support was added in 4.0.</p> <p>Changed 4.0</p> <p>On Windows systems, paths are now normalized to from using <code>\\</code> to <code>/</code>. This makes creating patterns for cross platform use much easier, but it may break some existing rules in the short term.</p>"},{"location":"usage/#project-specific-rules","title":"Project Specific Rules","text":"<p>To define project specific syntaxes, just create a <code>settings</code> key in your project file (if it doesn't already exist) and then and an additional key under <code>settings</code> called <code>project_syntaxes</code> or <code>project_ext_trim</code>.</p> <p><code>project_syntaxes</code> is an array; just add your syntax rules to <code>project_syntaxes</code> just like you would add them to <code>syntaxes</code> in your user settings file, and ApplySyntax will prepend the rules to the beginning of your defined rules. The order of rules is as follows: project \u2192 user \u2192 default.</p> <p><code>project_ext_trim</code> is also an array, and you can trim rules just as you would to <code>ext_trim</code> in your user settings file.</p> <p>There is one difference between project specific rules and global rules.  In project rules, the extensions key will not be applied to the associated syntax language settings file as project specific rules are not global, but language settings files are global.</p> <pre><code>    \"settings\": {\n\"project_syntaxes\": [\n{\n\"syntax\": \"XML/XML\",\n\"rules\": [\n{\"file_path\": \".*\\\\.xml(\\\\.dist)?$\"},\n{\"first_line\": \"^&lt;\\\\?xml\"}\n]\n}\n],\n\"project_ext_trim\": [\n{\"file_path\": \".*\\\\.file.temp\"}\n]\n}\n</code></pre>"},{"location":"usage/#settings-options","title":"Settings Options","text":"<p>There are a couple of general settings found in <code>ApplySyntax.sublime-settings</code>.</p>"},{"location":"usage/#re-raise-exceptions","title":"Re-Raise Exceptions","text":"<p>If an exception occurs when processing a function, this will re-raised the captured exception in Sublime's console so the user get feedback. This is really only useful to those writing functions. The average user shouldn't need this.  By default, the setting will be set to <code>false</code>.</p> <pre><code>    \"reraise_exceptions\": false,\n</code></pre>"},{"location":"usage/#new-file-syntax","title":"New File Syntax","text":"<p>If you want to have a syntax applied when new files are created, set <code>new_file_syntax</code> to the name of the syntax to use. The format is exactly the same as the syntax parameter in the syntax rules mentioned earlier. For example, if you want to have a new file use JavaScript syntax, set <code>new_file_syntax</code> to <code>JavaScript/JavaScript</code>.  The default is <code>false</code>.</p> <pre><code>    \"new_file_syntax\": \"JavaScript/JavaScript\",\n</code></pre>"},{"location":"usage/#add-extensions-to-language-settings","title":"Add Extensions to Language Settings","text":"<p>To enable adding defined extensions to language settings, just set <code>add_exts_to_lang_settings</code> to <code>true</code>.  See Extensions for more info.</p> <pre><code>    \"add_exts_to_lang_settings\": true,\n</code></pre>"},{"location":"usage/#troubleshooting-and-debugging","title":"Troubleshooting and Debugging","text":"<p>By default, the <code>debug</code> setting is turned on so that users have some form of visual feedback in the console that ApplySyntax is working.  This can be turned off by setting <code>debug</code> to <code>false</code>.  If developing, you can set <code>debug</code> to <code>verbose</code> to get even more info in the console.</p> <pre><code>    // Control level of logging in the console.\n// (true|false|\"verbose\")\n\"debug\": true,\n</code></pre>"},{"location":"about/changelog/","title":"ApplySyntax","text":""},{"location":"about/changelog/#420","title":"4.2.0","text":"<ul> <li>NEW: Add Dangerfile to Ruby patterns.</li> </ul>"},{"location":"about/changelog/#410","title":"4.1.0","text":"<ul> <li>NEW: Ensure <code>Cartfile</code>s are recognized as Ruby files.</li> <li>NEW: Migrate default patterns over to glob patterns from regex. If the intent of any patterns have changed in a   negative way, please create an issue.</li> </ul>"},{"location":"about/changelog/#403","title":"4.0.3","text":"<ul> <li>FIX: Recent versions of Sublime have the JSON syntax file in a new place.</li> <li>FIX: Add <code>.babelrc</code> and <code>.stylelintrc</code> to JSON rule.</li> <li>FIX: Reduce dependencies as they are all not required anymore.</li> <li>FIX: Support dialog did not show all relevant dependencies.</li> <li>FIX: New location for Ruby syntax files in later Sublime versions.</li> </ul>"},{"location":"about/changelog/#402","title":"4.0.2","text":"<ul> <li>FIX: Fix <code>Gemfile.lock</code> being detected as Ruby on Rails. (#148)</li> </ul>"},{"location":"about/changelog/#401","title":"4.0.1","text":"<ul> <li>FIX: \"Browse Syntaxes\" should show legacy <code>tmLanguage</code> files as well as the new <code>sublime-syntax</code>.</li> </ul>"},{"location":"about/changelog/#400","title":"4.0.0","text":"<ul> <li>NEW: All file names are now normalized to <code>/</code>, so regex patterns should no longer use <code>\\</code> to specify path   separators for Windows. Please update your patterns personal patterns to use <code>/</code> in the settings file instead of the   double escaped backslashes (<code>\\\\\\\\</code>). This applies to <code>file_path</code> rule patterns and <code>ext_trim</code> patterns.</li> <li>NEW: Add new <code>globmatch</code> rule.</li> <li>NEW: Add new <code>apply_syntax_browse</code> command in the command palette to browse all syntaxes. When one is selected,   the syntax will be copied to the clipboard in a form compatible to be used in a syntax rule.</li> <li>NEW: Add new <code>apply_syntax_current</code> command which will copy the current active view's syntax to the clipboard in a   form compatible to be used in a syntax rule.</li> </ul>"},{"location":"about/changelog/#301","title":"3.0.1","text":"<ul> <li>FIX: Avoid evaluating path if it is None.</li> </ul>"},{"location":"about/changelog/#300","title":"3.0.0","text":"<ul> <li>NEW: Remove deprecations.</li> <li>NEW: Add feature to allow configurable trimming of a file's extension and retry syntax detection if file path   fails initial detection. (#132)</li> </ul>"},{"location":"about/changelog/#255","title":"2.5.5","text":"<ul> <li>FIX: Fix check for unsaved buffer.</li> </ul>"},{"location":"about/changelog/#254","title":"2.5.4","text":"<ul> <li>FIX: Fix extension compare and order of evaluation.</li> </ul>"},{"location":"about/changelog/#253","title":"2.5.3","text":"<ul> <li>FIX: Use proper Bash syntax.</li> <li>FIX: Use proper Git syntax. (!119)</li> </ul>"},{"location":"about/changelog/#252","title":"2.5.2","text":"<ul> <li>FIX: Update shell scripts to use newest Bash language file.</li> </ul>"},{"location":"about/changelog/#251","title":"2.5.1","text":"<ul> <li>FIX: Update <code>Rspec</code> rule with <code>RSpec Buddy/RSpec Buddy</code>.</li> </ul>"},{"location":"about/changelog/#250","title":"2.5.0","text":"<ul> <li>NEW: Add document and settings command to command palette.</li> <li>FIX: Handling of list syntax.</li> </ul>"},{"location":"about/changelog/#241","title":"2.4.1","text":"<ul> <li>FIX: Fix usage of deprecated key name in default settings.</li> </ul>"},{"location":"about/changelog/#240","title":"2.4.0","text":"<ul> <li>NEW: Added <code>TypoScript</code> rules.</li> <li>NEW: Restrict phantoms to 3124+.</li> <li>NEW: Support commands.</li> </ul>"},{"location":"about/changelog/#231","title":"2.3.1","text":"<ul> <li>FIX: Configuration tweaks to YAML rules.</li> </ul>"},{"location":"about/changelog/#230","title":"2.3.0","text":"<ul> <li>NEW: Added changelog command.</li> <li>NEW: Added support command.</li> <li>FIX: Fix issue where <code>new_file_syntax</code> would occasionally not work #100.</li> </ul>"},{"location":"about/contributing/","title":"Contributing &amp; Support","text":""},{"location":"about/contributing/#overview","title":"Overview","text":"Sublime Versions Description ST2\u00a0&lt;=\u00a0version\u00a0&lt;\u00a0ST3 Supported on a separate branch, but not actively.  Any further fixes or enhancements must come from the community.  Issues for versions less than ST3 will not be addressed moving forward by me.  Pull requests are welcome for back-porting features, enhancements, or fixes to the old branch, but the content of the pull must already exist on the main, actively developed branch.  I will not allow an older branch to exceed the main branch in regards to functionality. ST3 Fully supported and actively maintained. <p>Contribution from the community is encouraged and can be done in a variety of ways:</p> <ul> <li>Become a sponsor.</li> <li>Bug reports.</li> <li>Reviewing code.</li> <li>Code patches via pull requests.</li> <li>Documentation improvements via pull requests.</li> </ul>"},{"location":"about/contributing/#become-a-sponsor","title":"Become a Sponsor","text":"<p>Open source projects take time and money. Help support the project by becoming a sponsor. You can add your support at any tier you feel comfortable with. No amount is too little. We also accept one time contributions via PayPal.</p> <p> GitHub Sponsors  PayPal</p>"},{"location":"about/contributing/#bug-reports","title":"Bug Reports","text":"<ol> <li> <p>Please read the documentation and search the issue tracker to try to find the answer to your question     before posting an issue.</p> </li> <li> <p>When creating an issue on the repository, please provide as much info as possible:</p> <ul> <li>Provide environment information by running <code>Preferences-&gt;Package Settings-&gt;ApplySyntax-&gt;Support Info</code>.  The     information will be copied to the clipboard; paste the info in issue.</li> <li>Errors in console.</li> <li>Detailed description of the problem.</li> <li>Examples for reproducing the error.  You can post pictures, but if specific text or code is required to     reproduce the issue, please provide the text in a plain text format as well for easy copy/paste.</li> </ul> <p>The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.</p> </li> <li> <p>Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses     to respond to follow up questions will be marked as stale and closed.</p> </li> </ol>"},{"location":"about/contributing/#reviewing-code","title":"Reviewing Code","text":"<p>Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.</p>"},{"location":"about/contributing/#pull-requests","title":"Pull Requests","text":"<p>Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.</p> <ol> <li> <p>Please describe the change in as much detail as possible so I can understand what is being added or modified.</p> </li> <li> <p>If you are solving a bug that does not already have an issue, please describe the bug in detail and provide info on     how to reproduce if applicable (this is good for me and others to reference later when verifying the issue has been     resolved).</p> </li> <li> <p>Please reference and link related open bugs or feature requests in this pull if applicable.</p> </li> <li> <p>Make sure you've documented or updated the existing documentation if introducing a new feature or modifying the     behavior of an existing feature that a user needs to be aware of.  I will not accept new features or changes to     existing features if you have not provided documentation describing the feature.</p> </li> </ol> <p>Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.</p>"},{"location":"about/contributing/#running-validation-tests","title":"Running Validation Tests","text":"<p>Tip</p> <p>If you are running Sublime on a macOS or Linux/Unix system, you run all tests by by running the shell script (assuming you have installed your environment fulfills all requirements below):</p> <pre><code>chmod +x run_tests.sh\n./run_tests.sh\n</code></pre> <p>There are a couple of dependencies that must be present before running the tests.</p> <ol> <li> <p>As ST3 is the only current, actively supported version, Python 3.3 must be used to validate the tests.</p> </li> <li> <p>Unit tests are run with <code>pytest</code>.  You can install <code>pytest</code> via:</p> <pre><code>pip install pytest\n</code></pre> <p>The tests should be run from the root folder of the plugin by using the following command:</p> <pre><code>py.test .\n</code></pre> </li> <li> <p>Linting is performed on the entire project with <code>flake8</code>, <code>flake8_docstrings</code>, <code>pep8-naming</code>.  These can be     installed via:</p> <pre><code>pip install flake8\npip install flake8_docstrings\npip install pep8-naming\n</code></pre> <p>Linting is performed with the following command:</p> <pre><code>flake8 .\n</code></pre> </li> </ol>"},{"location":"about/contributing/#documentation-improvements","title":"Documentation Improvements","text":"<p>A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation. If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn't be any need to run validation tests if only updating documentation.</p> <p>You don't have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of MkDocs, the Material theme, and PyMdown Extensions to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is <code>mkdocs serve</code> from the root directory. You can then view the documents at <code>localhost:8000</code>.</p>"},{"location":"about/license/","title":"License","text":"<p>Raw Line Edit is released under the MIT license.</p> <p>Copyright \u00a9 phillipkoebbe.</p> <p>Changes: Copyright \u00a9 2013 - 2022 Isaac Muse isaacmuse@gmail.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}